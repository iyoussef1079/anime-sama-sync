# name: CI/CD Pipeline

# on:
#   push:
#     branches: [ main ]
#     tags:
#       - 'v*'  # Trigger on version tags
#   pull_request:
#     branches: [ main ]

# jobs:
#   backend:
#     name: Backend Pipeline
#     runs-on: ubuntu-latest

#     env:
#       BACKEND_DIR: ./backend

#     steps:
#       - uses: actions/checkout@v3

#       - name: Set up Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: '18'
#           cache: 'npm'
#           cache-dependency-path: ${{ env.BACKEND_DIR }}/package-lock.json

#       - name: Install Backend Dependencies
#         working-directory: ${{ env.BACKEND_DIR }}
#         run: npm ci

#       - name: Run Backend Tests
#         working-directory: ${{ env.BACKEND_DIR }}
#         run: npm test
#         env:
#           FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
#           FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
#           FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}

#       - name: Build Backend
#         working-directory: ${{ env.BACKEND_DIR }}
#         run: npm run build

#       - name: Deploy to Vercel
#         if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#         uses: amondnet/vercel-action@v25
#         with:
#           vercel-token: ${{ secrets.VERCEL_TOKEN }}
#           vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
#           vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
#           working-directory: ${{ env.BACKEND_DIR }}
#           vercel-args: '--prod'

#   extension:
#     name: Extension Pipeline
#     runs-on: ubuntu-latest
#     needs: backend

#     env:
#       EXTENSION_DIR: ./extension

#     steps:
#       - uses: actions/checkout@v3

#       - name: Set up Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: '18'
#           cache: 'npm'
#           cache-dependency-path: ${{ env.EXTENSION_DIR }}/package-lock.json

#       - name: Install Extension Dependencies
#         working-directory: ${{ env.EXTENSION_DIR }}
#         run: npm ci

#       - name: Update Extension Version
#         if: startsWith(github.ref, 'refs/tags/v')
#         working-directory: ${{ env.EXTENSION_DIR }}
#         run: |
#           VERSION=${GITHUB_REF#refs/tags/v}
#           jq --arg version "$VERSION" '.version = $version' public/manifest.json > manifest.json.tmp
#           mv manifest.json.tmp public/manifest.json

#       - name: Build Extension
#         working-directory: ${{ env.EXTENSION_DIR }}
#         run: npm run build
#         env:
#           FIREBASE_CONFIG: ${{ secrets.FIREBASE_CONFIG }}
#           API_URL: ${{ secrets.API_URL }}

#       - name: Package Extension
#         working-directory: ${{ env.EXTENSION_DIR }}
#         run: |
#           zip -r extension.zip dist/*

#       - name: Create GitHub Release
#         if: startsWith(github.ref, 'refs/tags/v')
#         uses: softprops/action-gh-release@v1
#         with:
#           files: ${{ env.EXTENSION_DIR }}/extension.zip
#           generate_release_notes: true

#       - name: Deploy to Chrome Web Store
#         if: startsWith(github.ref, 'refs/tags/v')
#         uses: Passiverecords/chrome-extension-upload-action@1.4.1
#         with:
#           refresh-token: ${{ secrets.CHROME_WEBSTORE_REFRESH_TOKEN }}
#           client-id: ${{ secrets.CHROME_WEBSTORE_CLIENT_ID }}
#           client-secret: ${{ secrets.CHROME_WEBSTORE_CLIENT_SECRET }}
#           source: ${{ env.EXTENSION_DIR }}/extension.zip
#           app-id: ${{ secrets.CHROME_WEBSTORE_EXTENSION_ID }}
#           publish: true
#           file-name: extension.zip